import React, { useState, useEffect, useCallback } from 'react';
import { Settings, Play, Pause, RotateCcw } from 'lucide-react';

const ScoreTracker = () => {
  const [player1, setPlayer1] = useState({ name: 'Player 1', score: 0, color: '#FF6B35', time: { minutes: 0, seconds: 0 } });
  const [player2, setPlayer2] = useState({ name: 'Player 2', score: 0, color: '#4A90E2', time: { minutes: 0, seconds: 0 } });
  const [mainTimer, setMainTimer] = useState({ minutes: 0, seconds: 0 });
  const [countdownTimer, setCountdownTimer] = useState(10);
  const [gameState, setGameState] = useState('ready'); // 'ready', 'countdown', 'running', 'paused'
  const [showSettings, setShowSettings] = useState(false);
  const [keybinds, setKeybinds] = useState({
    p1Increase: 'q',
    p1Decrease: 'a',
    p1TimeInc: '1',
    p1TimeDec: '2',
    p1MinInc: '3',
    p1MinDec: '4',
    p2Increase: 'e',
    p2Decrease: 'd',
    p2TimeInc: '9',
    p2TimeDec: '0',
    p2MinInc: '8',
    p2MinDec: '7',
    startStop: ' ',
    reset: 'r'
  });

  // Main timer logic
  useEffect(() => {
    let interval = null;
    if (gameState === 'running') {
      interval = setInterval(() => {
        setMainTimer(prev => {
          const newSeconds = prev.seconds + 1;
          const newMinutes = prev.minutes + Math.floor(newSeconds / 60);
          return {
            minutes: newMinutes,
            seconds: newSeconds % 60
          };
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [gameState]);

  // Countdown timer logic
  useEffect(() => {
    let interval = null;
    if (gameState === 'countdown') {
      interval = setInterval(() => {
        setCountdownTimer(prev => {
          if (prev <= 1) {
            setGameState('running');
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [gameState]);

  // Keyboard controls
  const handleKeyPress = useCallback((event) => {
    const key = event.key.toLowerCase();
    
    switch (key) {
      case keybinds.p1Increase:
        setPlayer1(prev => ({ ...prev, score: prev.score + 1 }));
        break;
      case keybinds.p1Decrease:
        setPlayer1(prev => ({ ...prev, score: Math.max(0, prev.score - 1) }));
        break;
      case keybinds.p1TimeInc:
        setPlayer1(prev => ({
          ...prev,
          time: {
            minutes: prev.time.minutes,
            seconds: prev.time.seconds + 1 >= 60 ? 0 : prev.time.seconds + 1
          }
        }));
        if (player1.time.seconds + 1 >= 60) {
          setPlayer1(prev => ({
            ...prev,
            time: { ...prev.time, minutes: prev.time.minutes + 1 }
          }));
        }
        break;
      case keybinds.p1TimeDec:
        setPlayer1(prev => {
          let newSeconds = prev.time.seconds - 1;
          let newMinutes = prev.time.minutes;
          if (newSeconds < 0 && newMinutes > 0) {
            newSeconds = 59;
            newMinutes = newMinutes - 1;
          } else if (newSeconds < 0) {
            newSeconds = 0;
          }
          return {
            ...prev,
            time: { minutes: Math.max(0, newMinutes), seconds: Math.max(0, newSeconds) }
          };
        });
        break;
      case keybinds.p1MinInc:
        setPlayer1(prev => ({
          ...prev,
          time: { 
            minutes: prev.time.minutes + 1,
            seconds: prev.time.seconds
          }
        }));
        break;
      case keybinds.p1MinDec:
        setPlayer1(prev => ({
          ...prev,
          time: { 
            minutes: Math.max(0, prev.time.minutes - 1),
            seconds: prev.time.seconds
          }
        }));
        break;
      case keybinds.p2Increase:
        setPlayer2(prev => ({ ...prev, score: prev.score + 1 }));
        break;
      case keybinds.p2Decrease:
        setPlayer2(prev => ({ ...prev, score: Math.max(0, prev.score - 1) }));
        break;
      case keybinds.p2TimeInc:
        setPlayer2(prev => ({
          ...prev,
          time: {
            minutes: prev.time.minutes,
            seconds: prev.time.seconds + 1 >= 60 ? 0 : prev.time.seconds + 1
          }
        }));
        if (player2.time.seconds + 1 >= 60) {
          setPlayer2(prev => ({
            ...prev,
            time: { ...prev.time, minutes: prev.time.minutes + 1 }
          }));
        }
        break;
      case keybinds.p2TimeDec:
        setPlayer2(prev => {
          let newSeconds = prev.time.seconds - 1;
          let newMinutes = prev.time.minutes;
          if (newSeconds < 0 && newMinutes > 0) {
            newSeconds = 59;
            newMinutes = newMinutes - 1;
          } else if (newSeconds < 0) {
            newSeconds = 0;
          }
          return {
            ...prev,
            time: { minutes: Math.max(0, newMinutes), seconds: Math.max(0, newSeconds) }
          };
        });
        break;
      case keybinds.p2MinInc:
        setPlayer2(prev => ({
          ...prev,
          time: { 
            minutes: prev.time.minutes + 1,
            seconds: prev.time.seconds
          }
        }));
        break;
      case keybinds.p2MinDec:
        setPlayer2(prev => ({
          ...prev,
          time: { 
            minutes: Math.max(0, prev.time.minutes - 1),
            seconds: prev.time.seconds
          }
        }));
        break;
      case keybinds.startStop:
        if (event.code === 'Space') {
          event.preventDefault();
          handleStartStop();
        }
        break;
      case keybinds.reset:
        resetAll();
        break;
    }
  }, [keybinds, player1.time.seconds, player2.time.seconds]);

  useEffect(() => {
    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [handleKeyPress]);

  const handleStartStop = () => {
    if (gameState === 'ready') {
      setGameState('countdown');
      setCountdownTimer(10);
    } else if (gameState === 'running') {
      setGameState('paused');
    } else if (gameState === 'paused') {
      setGameState('running');
    }
  };

  const resetAll = () => {
    setPlayer1(prev => ({ ...prev, score: 0, time: { minutes: 0, seconds: 0 } }));
    setPlayer2(prev => ({ ...prev, score: 0, time: { minutes: 0, seconds: 0 } }));
    setMainTimer({ minutes: 0, seconds: 0 });
    setCountdownTimer(10);
    setGameState('ready');
  };

  const formatTime = (minutes, seconds) => {
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  };

  const getTimerDisplay = () => {
    if (gameState === 'countdown') {
      return `Starting in ${countdownTimer}`;
    }
    return formatTime(mainTimer.minutes, mainTimer.seconds);
  };

  const getStartButtonText = () => {
    if (gameState === 'ready') return 'Start Game';
    if (gameState === 'countdown') return 'Starting...';
    if (gameState === 'running') return 'Pause';
    return 'Resume';
  };

  return (
    <div className="p-4">
      <div className="relative">
        {/* Settings Panel */}
        {showSettings && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="w-96 bg-gray-800 rounded-lg p-6 shadow-2xl border border-gray-600 max-h-96 overflow-y-auto">
            <h3 className="text-white text-xl font-bold mb-4">Settings</h3>
            
            {/* Player 1 Settings */}
            <div className="mb-4">
              <h4 className="text-gray-300 mb-2">Player 1</h4>
              <input
                type="text"
                value={player1.name}
                onChange={(e) => setPlayer1(prev => ({ ...prev, name: e.target.value }))}
                className="w-full bg-gray-700 text-white px-3 py-2 rounded mb-2"
                placeholder="Player 1 Name"
              />
              <input
                type="color"
                value={player1.color}
                onChange={(e) => setPlayer1(prev => ({ ...prev, color: e.target.value }))}
                className="w-full h-10 rounded"
              />
            </div>

            {/* Player 2 Settings */}
            <div className="mb-4">
              <h4 className="text-gray-300 mb-2">Player 2</h4>
              <input
                type="text"
                value={player2.name}
                onChange={(e) => setPlayer2(prev => ({ ...prev, name: e.target.value }))}
                className="w-full bg-gray-700 text-white px-3 py-2 rounded mb-2"
                placeholder="Player 2 Name"
              />
              <input
                type="color"
                value={player2.color}
                onChange={(e) => setPlayer2(prev => ({ ...prev, color: e.target.value }))}
                className="w-full h-10 rounded"
              />
            </div>

            {/* Keybind Settings */}
            <div className="mb-4">
              <h4 className="text-gray-300 mb-2">Keybinds</h4>
              <div className="grid grid-cols-2 gap-2 text-sm">
                <div>
                  <label className="text-gray-400">P1 Score +:</label>
                  <input
                    type="text"
                    value={keybinds.p1Increase}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p1Increase: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P1 +1 Min:</label>
                  <input
                    type="text"
                    value={keybinds.p1MinInc}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p1MinInc: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P1 -1 Min:</label>
                  <input
                    type="text"
                    value={keybinds.p1MinDec}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p1MinDec: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P2 +1 Min:</label>
                  <input
                    type="text"
                    value={keybinds.p2MinInc}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p2MinInc: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P2 -1 Min:</label>
                  <input
                    type="text"
                    value={keybinds.p2MinDec}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p2MinDec: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P1 Score -:</label>
                  <input
                    type="text"
                    value={keybinds.p1Decrease}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p1Decrease: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P1 Time +:</label>
                  <input
                    type="text"
                    value={keybinds.p1TimeInc}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p1TimeInc: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P1 Time -:</label>
                  <input
                    type="text"
                    value={keybinds.p1TimeDec}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p1TimeDec: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P2 Score +:</label>
                  <input
                    type="text"
                    value={keybinds.p2Increase}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p2Increase: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P2 Score -:</label>
                  <input
                    type="text"
                    value={keybinds.p2Decrease}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p2Decrease: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P2 Time +:</label>
                  <input
                    type="text"
                    value={keybinds.p2TimeInc}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p2TimeInc: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
                <div>
                  <label className="text-gray-400">P2 Time -:</label>
                  <input
                    type="text"
                    value={keybinds.p2TimeDec}
                    onChange={(e) => setKeybinds(prev => ({ ...prev, p2TimeDec: e.target.value.toLowerCase() }))}
                    className="w-full bg-gray-700 text-white px-2 py-1 rounded"
                    maxLength="1"
                  />
                </div>
              </div>
              <div className="mt-2 text-xs text-gray-400">
                <p>Space: Start/Pause Game</p>
                <p>R: Reset All</p>
              </div>
            </div>

            <button
              onClick={() => setShowSettings(false)}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded transition-colors"
            >
              Close Settings
            </button>
          </div>
        </div>
        )}

        {/* Main Score Display */}
        <div className="bg-black bg-opacity-70 rounded-2xl p-8 shadow-2xl border border-gray-600 relative">
          {/* Settings Button */}
          <button
            onClick={() => setShowSettings(!showSettings)}
            className="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors"
          >
            <Settings size={24} />
          </button>

          {/* Score Display */}
          <div className="flex items-center justify-center space-x-8 mb-6">
            {/* Player 1 */}
            <div className="text-center">
              <div 
                className="text-6xl font-bold mb-2"
                style={{ color: player1.color }}
              >
                {player1.score}
              </div>
              <div 
                className="text-sm font-medium px-4 py-2 rounded-full mb-2"
                style={{ backgroundColor: player1.color, color: 'white' }}
              >
                {player1.name}
              </div>
              <div 
                className="text-lg font-mono"
                style={{ color: player1.color }}
              >
                {formatTime(player1.time.minutes, player1.time.seconds)}
              </div>
            </div>

            {/* VS Separator */}
            <div className="text-white text-2xl font-bold">VS</div>

            {/* Player 2 */}
            <div className="text-center">
              <div 
                className="text-6xl font-bold mb-2"
                style={{ color: player2.color }}
              >
                {player2.score}
              </div>
              <div 
                className="text-sm font-medium px-4 py-2 rounded-full mb-2"
                style={{ backgroundColor: player2.color, color: 'white' }}
              >
                {player2.name}
              </div>
              <div 
                className="text-lg font-mono"
                style={{ color: player2.color }}
              >
                {formatTime(player2.time.minutes, player2.time.seconds)}
              </div>
            </div>
          </div>

          {/* Main Timer Display */}
          <div className="text-center mb-6">
            <div className={`text-4xl font-mono mb-2 ${gameState === 'countdown' ? 'text-red-400' : 'text-white'}`}>
              {getTimerDisplay()}
            </div>
            <div className="flex justify-center space-x-2">
              <button
                onClick={handleStartStop}
                disabled={gameState === 'countdown'}
                className={`flex items-center space-x-1 px-4 py-2 rounded transition-colors ${
                  gameState === 'countdown' 
                    ? 'bg-gray-600 cursor-not-allowed'
                    : gameState === 'running'
                    ? 'bg-yellow-600 hover:bg-yellow-700'
                    : 'bg-green-600 hover:bg-green-700'
                } text-white`}
              >
                {gameState === 'running' ? <Pause size={16} /> : <Play size={16} />}
                <span>{getStartButtonText()}</span>
              </button>
              <button
                onClick={resetAll}
                className="flex items-center space-x-1 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded transition-colors"
              >
                <RotateCcw size={16} />
                <span>Reset</span>
              </button>
            </div>
          </div>

          {/* Quick Controls */}
          <div className="flex justify-center space-x-8 text-sm text-gray-400">
            <div className="text-center">
              <div className="font-medium mb-1">{player1.name} Controls</div>
              <div>Score: ({keybinds.p1Increase.toUpperCase()}) +1 | ({keybinds.p1Decrease.toUpperCase()}) -1</div>
              <div>Time: ({keybinds.p1TimeInc.toUpperCase()}) +1s | ({keybinds.p1TimeDec.toUpperCase()}) -1s | ({keybinds.p1MinInc.toUpperCase()}) +1m | ({keybinds.p1MinDec.toUpperCase()}) -1m</div>
            </div>
            <div className="text-center">
              <div className="font-medium mb-1">{player2.name} Controls</div>
              <div>Score: ({keybinds.p2Increase.toUpperCase()}) +1 | ({keybinds.p2Decrease.toUpperCase()}) -1</div>
              <div>Time: ({keybinds.p2TimeInc.toUpperCase()}) +1s | ({keybinds.p2TimeDec.toUpperCase()}) -1s | ({keybinds.p2MinInc.toUpperCase()}) +1m | ({keybinds.p2MinDec.toUpperCase()}) -1m</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ScoreTracker;
